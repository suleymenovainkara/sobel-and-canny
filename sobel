import cv2
import numpy as np
import matplotlib.pyplot as plt

def sobel_edge_detection(image_path):
    # Read the image
    image = cv2.imread(image_path)
    if image is None:
        print("Error: Image not found.")
        return

    # Convert the image to grayscale
    gray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

    # Apply the Sobel operator in the X direction
    sobel_x = cv2.Sobel(gray_image, cv2.CV_64F, 1, 0, ksize=3)

    # Apply the Sobel operator in the Y direction
    sobel_y = cv2.Sobel(gray_image, cv2.CV_64F, 0, 1, ksize=3)

    # Calculate the magnitude of the gradients
    magnitude = np.sqrt(sobel_x**2 + sobel_y**2)

    # Normalize to 0 to 255
    magnitude = np.uint8(255 * magnitude / np.max(magnitude))

    # Display the results
    plt.figure(figsize=(10, 10))
    plt.subplot(1, 3, 1), plt.imshow(gray_image, cmap='gray'), plt.title('Original')
    plt.subplot(1, 3, 2), plt.imshow(sobel_x, cmap='gray'), plt.title('Sobel X')
    plt.subplot(1, 3, 3), plt.imshow(sobel_y, cmap='gray'), plt.title('Sobel Y')
    plt.show()

    plt.figure(figsize=(5, 5))
    plt.imshow(magnitude, cmap='gray'), plt.title('Magnitude')
    plt.show()

# Example usage
sobel_edge_detection("pic.jpg")
